<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.upedge.oms.modules.stock.dao.CustomerProductStockDao">

    <!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.upedge.oms.modules.stock.entity.CustomerProductStock" id="BaseResultMap">
        <result property="id" column="id"/>
        <result property="customerId" column="customer_id"/>
        <result property="productId" column="product_id"/>
        <result property="variantId" column="variant_id"/>
        <result property="stock" column="stock"/>
        <result property="warehouseCode" column="warehouse_code"/>
        <result property="lockStock" column="lock_stock"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="variantImage" column="variant_image"/>
        <result property="variantSku" column="variant_sku"/>
        <result property="productTitle" column="product_title"/>
        <result property="variantName" column="variant_name"/>
        <result property="stockType" column="stock_type"/>
        <result property="customerShowState" column="customer_show_state"/>
    </resultMap>

    <sql id="Base_Column_List">
        `id`,`customer_id`,`product_id`,`variant_id`,`stock`,`warehouse_code`,`lock_stock`,`create_time`,`update_time`,`variant_image`,`variant_sku`,`product_title`,`variant_name`,`stock_type`,`customer_show_state`
    </sql>

    <select id="selectVariantStockByCustomer" resultType="java.lang.Long">
        select stock
        from customer_product_stock
        where customer_id = #{customerId}
        and variant_id = #{variantId}
        and warehouse_code = #{warehouseCode}
        limit 1
    </select>

    <select id="selectWarehouseVariantIdsByCustomer" resultType="java.lang.Long">
        select distinct variant_id
        from customer_product_stock
        where customer_id = #{customerId}
        and warehouse_code = #{warehouseCode}
    </select>

    <update id="increaseVariantStock">
        <foreach collection="stocks" item="s" separator=";">
            update customer_product_stock
            set stock = stock + #{s.stock},
            variant_image = #{s.variantImage},
            customer_show_state = '1'
            where customer_id = #{s.customerId}
            and warehouse_code = #{s.warehouseCode}
            and variant_id = #{s.variantId}
        </foreach>
    </update>


    <update id="increaseCustomerLockStock">
        <foreach collection="items" item="item" separator=";">
            update customer_product_stock
            set stock = stock - #{item.dischargeQuantity},lock_stock = lock_stock + #{item.dischargeQuantity}
            where customer_id = #{customerId}
            and variant_id = #{item.variantId}
            and stock >= #{item.dischargeQuantity}
            limit 1
        </foreach>
    </update>

    <update id="reduceFromLockStock">
        <foreach collection="items" item="item" separator=";">
            update customer_product_stock
            set lock_stock = lock_stock - #{item.dischargeQuantity}
            where customer_id = #{customerId}
            and variant_id = #{item.variantId}
            and lock_stock >= #{item.dischargeQuantity}
        </foreach>
    </update>

    <update id="increaseFromLockStock">
        <foreach collection="items" item="item" separator=";">
            update customer_product_stock
            set stock = stock + #{item.dischargeQuantity},lock_stock = lock_stock - #{item.dischargeQuantity}
            where customer_id = #{customerId}
            and variant_id = #{item.variantId}
            and lock_stock >= #{item.dischargeQuantity}
            limit 1
        </foreach>
    </update>

    <update id="reduceCustomerStockAfterDeduct">
        <foreach collection="items" item="item" separator=";">
            update customer_product_stock
            set stock = stock - #{item.dischargeQuantity}
            where customer_id = #{customerId}
            and variant_id = #{item.variantId}
            and stock >= #{item.dischargeQuantity}
            limit 1
        </foreach>
    </update>

    <select id="selectByPrimaryKey" parameterType="com.upedge.oms.modules.stock.entity.CustomerProductStock"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from customer_product_stock
        where id = #{id}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="com.upedge.oms.modules.stock.entity.CustomerProductStock">
        delete from customer_product_stock
        where id = #{id}
    </delete>

    <update id="updateByPrimaryKeySelective" parameterType="com.upedge.oms.modules.stock.entity.CustomerProductStock">
        update customer_product_stock
        <set>
            <if test="customerId != null">
                customer_id = #{customerId},
            </if>
            <if test="productId != null">
                product_id = #{productId},
            </if>
            <if test="variantId != null">
                variant_id = #{variantId},
            </if>
            <if test="stock != null">
                stock = #{stock},
            </if>
            <if test="warehouseCode != null">
                warehouse_code = #{warehouseCode},
            </if>
            <if test="lockStock != null">
                lock_stock = #{lockStock},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="variantImage != null">
                variant_image = #{variantImage},
            </if>
            <if test="variantSku != null">
                variant_sku = #{variantSku},
            </if>
            <if test="productTitle != null">
                product_title = #{productTitle},
            </if>
            <if test="variantName != null">
                variant_name = #{variantName},
            </if>
            <if test="stockType != null">
                stock_type = #{stockType},
            </if>
            <if test="customerShowState != null">
                customer_show_state = #{customerShowState},
            </if>
        </set>
        where id = #{id}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.upedge.oms.modules.stock.entity.CustomerProductStock">
        update customer_product_stock
        <set>
            id = #{id},
            customer_id = #{customerId},
            product_id = #{productId},
            variant_id = #{variantId},
            stock = #{stock},
            warehouse_code = #{warehouseCode},
            lock_stock = #{lockStock},
            create_time = #{createTime},
            update_time = #{updateTime},
            variant_image = #{variantImage},
            variant_sku = #{variantSku},
            product_title = #{productTitle},
            variant_name = #{variantName},
            stock_type = #{stockType},
            customer_show_state = #{customerShowState},
        </set>
        where id = #{id}
    </update>

    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.upedge.oms.modules.stock.entity.CustomerProductStock" useGeneratedKeys="true">
        insert into customer_product_stock
        <trim prefix="(" suffix=")" suffixOverrides=",">
            id,
            customer_id,
            product_id,
            variant_id,
            stock,
            warehouse_code,
            lock_stock,
            create_time,
            update_time,
            variant_image,
            variant_sku,
            product_title,
            variant_name,
            stock_type,
            customer_show_state
        </trim>
        values (
        #{id},
        #{customerId},
        #{productId},
        #{variantId},
        #{stock},
        #{warehouseCode},
        #{lockStock},
        #{createTime},
        #{updateTime},
        #{variantImage},
        #{variantSku},
        #{productTitle},
        #{variantName},
        #{stockType},
        #{customerShowState}
        )
    </insert>

    <insert id="insertSelective"  keyColumn="id" keyProperty="id"  parameterType="com.upedge.oms.modules.stock.entity.CustomerProductStock" useGeneratedKeys="true">
        insert into customer_product_stock
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null" >
                id
            </if>
            <if test="customerId != null" >
                customer_id
            </if>
            <if test="productId != null" >
                product_id
            </if>
            <if test="variantId != null" >
                variant_id
            </if>
            <if test="stock != null" >
                stock
            </if>
            <if test="warehouseCode != null" >
                warehouse_code
            </if>
            <if test="lockStock != null" >
                lock_stock
            </if>
            <if test="createTime != null" >
                create_time
            </if>
            <if test="updateTime != null" >
                update_time
            </if>
            <if test="variantImage != null" >
                variant_image
            </if>
            <if test="variantSku != null" >
                variant_sku
            </if>
            <if test="productTitle != null" >
                product_title
            </if>
            <if test="variantName != null" >
                variant_name
            </if>
            <if test="stockType != null" >
                stock_type
            </if>
            <if test="customerShowState != null" >
                customer_show_state
            </if>

        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null" >
                #{id}
            </if>
            <if test="customerId != null" >
                #{customerId}
            </if>
            <if test="productId != null" >
                #{productId}
            </if>
            <if test="variantId != null" >
                #{variantId}
            </if>
            <if test="stock != null" >
                #{stock}
            </if>
            <if test="warehouseCode != null" >
                #{warehouseCode}
            </if>
            <if test="lockStock != null" >
                #{lockStock}
            </if>
            <if test="createTime != null" >
                #{createTime}
            </if>
            <if test="updateTime != null" >
                #{updateTime}
            </if>
            <if test="variantImage != null" >
                #{variantImage}
            </if>
            <if test="variantSku != null" >
                #{variantSku}
            </if>
            <if test="productTitle != null" >
                #{productTitle}
            </if>
            <if test="variantName != null" >
                #{variantName}
            </if>
            <if test="stockType != null" >
                #{stockType}
            </if>
            <if test="customerShowState != null" >
                #{customerShowState}
            </if>

        </trim>
    </insert>

    <insert id="insertByBatch" parameterType="java.util.List">
        insert into customer_product_stock
        <trim prefix="(" suffix=")" suffixOverrides=",">
            id,
            customer_id,
            product_id,
            variant_id,
            stock,
            warehouse_code,
            lock_stock,
            create_time,
            update_time,
            variant_image,
            variant_sku,
            product_title,
            variant_name,
            stock_type,
            customer_show_state
        </trim>
        values
        <foreach collection="list" item="item" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                #{item.id},
                #{item.customerId},
                #{item.productId},
                #{item.variantId},
                #{item.stock},
                #{item.warehouseCode},
                #{item.lockStock},
                #{item.createTime},
                #{item.updateTime},
                #{item.variantImage},
                #{item.variantSku},
                #{item.productTitle},
                #{item.variantName},
                #{item.stockType},
                #{item.customerShowState}
            </trim>
        </foreach>
    </insert>

    <sql id="Query_Condition">
        <if test="t != null">
            where
            <trim prefix=" " suffix=" " suffixOverrides=" and ">
                1 = 1 and
                <if test="t.id != null">
                    id = #{t.id} and
                </if>
                <if test="t.customerId != null">
                    customer_id = #{t.customerId} and
                </if>
                <if test="t.productId != null">
                    product_id = #{t.productId} and
                </if>
                <if test="t.variantId != null">
                    variant_id = #{t.variantId} and
                </if>
                <if test="t.stock != null">
                    stock = #{t.stock} and
                </if>
                <if test="t.warehouseCode != null">
                    warehouse_code = #{t.warehouseCode} and
                </if>
                <if test="t.lockStock != null">
                    lock_stock = #{t.lockStock} and
                </if>
                <if test="t.createTime != null">
                    create_time = #{t.createTime} and
                </if>
                <if test="t.updateTime != null">
                    update_time = #{t.updateTime} and
                </if>
                <if test="t.variantImage != null">
                    variant_image = #{t.variantImage} and
                </if>
                <if test="t.variantSku != null">
                    variant_sku = #{t.variantSku} and
                </if>
                <if test="t.productTitle != null">
                    product_title = #{t.productTitle} and
                </if>
                <if test="t.variantName != null">
                    variant_name = #{t.variantName} and
                </if>
                <if test="t.stockType != null">
                    stock_type = #{t.stockType} and
                </if>
                <if test="t.customerShowState != null">
                    customer_show_state = #{t.customerShowState} and
                </if>
            </trim>
        </if>
    </sql>

    <select id="select" parameterType="com.upedge.common.base.Page" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from customer_product_stock
        <include refid="Query_Condition"/>
        <if test="orderBy != null">
            order by ${orderBy}
        </if>
        <if test="pageNum != null and pageSize != null">
            limit #{fromNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
        </if>
    </select>

    <select id="count" parameterType="com.upedge.common.base.Page" resultType="java.lang.Long">
        select
        count(1)
        from customer_product_stock
        <include refid="Query_Condition"/>
    </select>

    <select id="queryStockForCustomerProduct" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from customer_product_stock
        where customer_id=#{customerId}
        and variant_id=#{variantId} and warehouse_code=#{warehouseCode}
    </select>

    <!-- 根据sku分组获得该sku下的数量 -->
    <select id="getCustomerStockNum" resultType="com.upedge.common.model.order.vo.CustomerProductStockNumVo">
            SELECT
                variant_sku variantSku,
                sum(stock)  customerStock
            FROM
                `customer_product_stock`
            GROUP BY
                variant_sku
    </select>
    <select id="selectStockByVariantAndCustomerId"
            resultType="com.upedge.oms.modules.stock.entity.CustomerProductStock">
        select
        <include refid="Base_Column_List"/>
        from customer_product_stock
        where  customer_id = #{customerId}
        and  variant_id = #{variantId}
        and warehouse_code = #{warehouseCode}
        limit 1
    </select>

    <update id="subStockForRefund">
        update customer_product_stock set stock=stock-#{quantity} where id=#{id} and stock>=#{quantity}
    </update>

    <select id="selectCustomerWarehouseVariantStock"
            resultType="com.upedge.oms.modules.stock.vo.CustomerWarehouseVariantStockVo">
        select warehouse_code,variant_id,sum(stock) as stock
            from customer_product_stock
        where customer_id = #{customerId}
            and stock > '0'
        group  by warehouse_code,variant_id
    </select>

    <select id="selectAllCustomerStocks" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from customer_product_stock
        where stock > '0'
    </select>

    <select id="selectCustomerStockWarehouses" resultType="java.lang.String">
        select distinct warehouse_code
        from customer_product_stock
        where customer_id = #{customerId}
    </select>
</mapper>